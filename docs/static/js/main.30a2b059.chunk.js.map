{"version":3,"sources":["common/icon-link.js","layout.js","lib/math/prime.ts","math/prime/is-prime.js","math/prime/compute.js","math/prime/index.js","iban/index.tsx","router.js","serviceWorker.ts","index.tsx"],"names":["props","name","href","aria-label","className","aria-hidden","style","borderTop","borderBottom","boxShadow","title","prefix","menus","link","Layout","header","to","map","menu","i","key","Fragment","children","compute","max","primes","length","j","p","push","unshift","isPrime","n","start","Date","now","includes","elapsed","console","log","React","useState","value","setValue","isValuePrime","setIsValuePrime","onSubmit","e","preventDefault","Prime","warn","type","onChange","a","v","Number","target","onClick","setPrimes","placeholder","JSON","stringify","iban","setIban","undefined","bic","setBic","SwissBanks","history","History","basename","process","NotFound","Public","transform","WrappedRouter","withRouter","exact","path","component","Iban","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30a2b059.chunk.js","sourcesContent":["import React from 'react';\n\nexport default props => {\n  const { name, href } = props;\n  return <a aria-label={name} href={href}>\n    <i className={`fa fa-${name}`} aria-hidden=\"true\"/>\n  </a>;\n};\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nimport IconLink from \"./common/icon-link\";\n\nconst style = {\n  borderTop: \"1px solid #e5e5e5\",\n  borderBottom: \"1px solid #e5e5e5\",\n  boxShadow: \"0 .25rem .75rem rgba(0, 0, 0, .05)\",\n};\n\nconst title = \"Finance\";\n\nconst prefix = \"\"; // process.env.PUBLIC_URL || '';\n\nconst menus = [\n  { name: \"Prime Number\", link: \"/prime\" },\n  { name: \"IBAN\", link: \"/iban\" },\n];\n\nfunction Layout(props) {\n  const header = (\n    <header>\n      <div\n        style={style}\n        className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3\"\n      >\n        <h5 className=\"my-0 mr-md-auto font-weight-normal\">\n          <Link to={prefix + \"/\"}>{title}</Link>\n        </h5>\n        <nav className=\"my-2 my-md-0 mr-md-3\">\n          {menus.map((menu, i) => (\n            <Link className=\"p-2 text-dark\" key={i} to={menu.link}>\n              {menu.name}\n            </Link>\n          ))}\n          <IconLink\n            name=\"code\"\n            href={\"https://github.com/Nexysweb/js-finance\"}\n          />\n        </nav>\n      </div>\n    </header>\n  );\n\n  return (\n    <React.Fragment>\n      {header}\n      <div className=\"container\">{props.children}</div>\n    </React.Fragment>\n  );\n}\nexport default Layout;\n","/**\n * computes primed up to a certain level\n * @param  max     last/max value to test\n * @param  {Array}  primes array of pre computed primes\n * @return list of primes until max\n */\nexport function compute(max: number, primes:number[] = [3]):number[] {\n  // go through all numbers starting at \n  const lastPrime = primes[primes.length - 1];\n  for (let i = lastPrime + 2; i <= max ; i=i+2) {\n\n    //console.log(`testing ${i}`)\n    // go throuth primes alreadyc omputed\n    for (let j = 0; j < primes.length; j++) {\n      const p = primes[j];\n\n      if (p*p > i) {\n        primes.push(i);\n        break;\n      }\n      // check if number of interest can be divided with prime tested\n      const isNotPrime = i % p === 0;\n      //console.log(`testing ${i} % ${primes[j]} = ${i % primes[j]} === 0`)\n\n      if (isNotPrime === true) {\n        break;\n      }\n    }\n  }\n\n  // add '2' to the list of primes (it was ommitted earlier for efficiency reasons)\n  primes.unshift(2);\n\n  return primes;\n}\n\ninterface isPrimeReturn {\n  isPrime: boolean;\n  elapsed: number;\n}\n\nexport function isPrime(n:number):isPrimeReturn {\n  const start = Date.now();\n  const primes = compute(n);\n  const isPrime = primes.includes(n);\n  const end = Date.now();\n  const elapsed = end - start; // time in milliseconds\n  console.log(`it took ${elapsed}`);\n\n  return {isPrime, elapsed};\n}","import React from 'react';\nimport {Prime} from '../../lib/math';\n\nexport default props => {\n  const [ value, setValue ] = React.useState(null);\n  const [ isValuePrime, setIsValuePrime ] = React.useState(null);\n\n  const onChange = a => {\n    const v = Number(a.target.value);\n    setValue(v);\n    setIsValuePrime(null);\n  }\n\n  const onSubmit = e => {\n    e.preventDefault()\n    if (value === null) {\n      console.warn('No input given');\n      return;\n    }\n\n    setIsValuePrime(Prime.isPrime(value));\n  }\n\n  const renderPrime = () => {\n    if (isValuePrime === null) {\n      return null;\n    }\n\n    return <span>{value} is {isValuePrime.isPrime === false ? 'not' : ''} a prime number! <small>Computation time: {isValuePrime.elapsed}ms</small></span>;\n  }\n\n  return <React.Fragment>\n    <form onSubmit={onSubmit}>\n      <input type=\"number\" onChange={onChange}/>\n      <button type=\"submit\" onClick={onSubmit}>Is {value} a prime number?</button>\n    </form>\n    {renderPrime()}\n  </React.Fragment>\n}","import React from 'react';\nimport {Prime} from '../../lib/math';\n\nexport default props => {\n  const [ value, setValue ] = React.useState(null);\n  const [ primes, setPrimes ] = React.useState(null);\n\n  const onChange = a => {\n    const v = Number(a.target.value);\n    setValue(v);\n  }\n\n  const onSubmit = e => {\n    e.preventDefault()\n    if (value === null) {\n      console.warn('No input given');\n      return;\n    }\n\n    setPrimes(Prime.compute(value));\n  }\n\n  const renderPrimes = () => {\n    if (primes === null) {\n      return null;\n    }\n\n    return <code>{JSON.stringify(primes)}</code>;\n  }\n\n  return <React.Fragment>\n    <form onSubmit={onSubmit}>\n      <input type=\"number\" onChange={onChange} placeholder=\"max value\"/>\n      <button type=\"submit\" onClick={onSubmit}>Compute prime numbers</button>\n    </form>\n    {renderPrimes()}\n  </React.Fragment>\n}","import React from 'react';\n\nimport IsPrime from './is-prime';\nimport Compute from './compute';\n\nexport default props => {\n  return <div className=\"row\">\n    <div className=\"col-md-6\">\n    <IsPrime/>\n    </div>\n\n    <div className=\"col-md-6\">\n    <Compute/>\n    </div>\n\n    <p><small>Note: the computation is carried out by your browser, no information is send to a server. Be careful when inputting large numbers as this may crash your browser!</small></p>\n  </div>\n}","import React from \"react\";\nimport * as SwissBanks from \"@nexys/swiss-banks\";\n\nexport default () => {\n  const [iban, setIban] = React.useState<string>(\"\");\n  const [bic, setBic] = React.useState<string | undefined>(undefined);\n\n  const onSubmit = (e: any) => {\n    e.preventDefault();\n\n    setBic(SwissBanks.ibanToBic(iban));\n  };\n\n  const renderPrimes = () => {\n    if (!bic) {\n      return null;\n    }\n\n    return <code>{JSON.stringify(bic)}</code>;\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input onChange={(v) => setIban(v.target.value)} placeholder=\"iban\" />\n        <button type=\"submit\" onClick={onSubmit}>\n          Get BIC\n        </button>\n      </form>\n      {renderPrimes()}\n    </>\n  );\n};\n","import React from \"react\";\nimport { Router, Switch, Route, withRouter } from \"react-router-dom\";\n\nimport * as History from \"history\";\n\nimport Layout from \"./layout\";\n\nimport Prime from \"./math/prime/index\";\nimport Iban from \"./iban\";\n\nconst history = History.createBrowserHistory({\n  basename: process.env.PUBLIC_URL || \"\",\n});\n\nconst NotFound = () => <p>Page Not Found</p>;\nconst Public = () => (\n  <p>\n    Browse to the different pages via the menu{\" \"}\n    <i\n      className=\"fa fa-arrow-right\"\n      style={{\n        transform: \"rotate(-45deg)\",\n      }}\n    ></i>\n  </p>\n);\n\nfunction MyRouter(props) {\n  return (\n    <Layout>\n      <Switch>\n        <Route exact path=\"/prime\" component={Prime} props={props} />\n        <Route exact path=\"/iban\" component={Iban} props={props} />\n        <Route path=\"/\" component={Public} props={props} />\n        <Route path=\"/\" component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nconst WrappedRouter = withRouter(MyRouter);\n\nexport default () => (\n  <Router history={history}>\n    <WrappedRouter />\n  </Router>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport AppRouter from './router.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppRouter />\n  ,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}